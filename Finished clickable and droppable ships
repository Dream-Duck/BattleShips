
/**
 * BattleShipsGame. A guessing game for two players where they attempt to attack each others ships till one is left standing.
 *
 * @author Zahra Salemi
 * @version 04-06-2025
 */

// Library //
import javax.swing.*;
import java.awt.*;
import java.awt.Dimension;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import javax.swing.JPanel;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class BattleShips extends JFrame 
{
    // Class vairables
    int gridRows = 10;
    int gridCols = 10;
    private int[][] playerBoard = new int[gridRows][gridCols]; // Stores player's grid (0 = empty, 1 = ship)
    private JButton[][] buttons = new JButton[gridRows][gridCols]; // Stores button references for each cell
    
    // Ship being dragged and placed:
    private boolean placingHorizontal = true; // Controls ship rotation (Placeholder)
    private boolean draggingShip = false; // True if a ship is currently selected for dragging
    private int shipIsDragging = 0; // Holds the size of the ship being dragged
    private JPanel shipPanel; // Stores the left side panel with draggable ships
    private JPanel selectedShip = null; // Tracks when ship is selected
    private JLabel messageLabel; // Shows messages at the bottom of the grid

    public BattleShips()
    {
        //Setting up the main window:
        setTitle("BattleShips Game!"); 
        setSize(800,600); // Window size: width x height
        setDefaultCloseOperation(EXIT_ON_CLOSE); // Closes program on window close
        setLayout(new BorderLayout()); // Sets the layout, Bourderlayout allowing North,South,Center, etc

        //Adding a title at the top of the window:
        JLabel title = new JLabel("BattleShip Game!", SwingConstants.CENTER);
        title.setFont(new Font("Comic Sans MS", Font.BOLD,24)); // Font stylin for title

        // Adding the help icon with tooltip instructions:
        JButton helpIcon = new JButton("❓");
        helpIcon.setFocusPainted(false);
        helpIcon.setContentAreaFilled(false);
        helpIcon.setBorderPainted(false);
        helpIcon.setFont(new Font("SansSerif", Font.PLAIN, 24));
        helpIcon.setToolTipText(( // Tooltip with game instructions
                "<html>" +
                "<b>Welcome to BattleShip!</b><br>" +
                "This is a two-player game.<br>" +
                "Place your ships and sink the enemy’s.<br>" +
                "Click your ship and click where you want to place it on the grid <br>" +
                "Click a spot to fire a shot.<br>" +
                "Red = Hit, Blue = Miss.<br>" +
                "Ships are shown in grey.<br>" +
                "<i>Good luck!</i>" +
                "</html>"));
        helpIcon.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); // Makes it look interactive for the user
        helpIcon.setBorder(BorderFactory.createEmptyBorder(0,10,0,0)); // Creates space from the title

        // Adding both the title and instructions to a panel
        JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        titlePanel.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
        titlePanel.add(title);
        titlePanel.add(helpIcon);
        add(titlePanel,BorderLayout.NORTH);

        // Creating a 10x10 grid:
        JPanel gridPanel = new JPanel(new GridLayout(gridRows,gridCols));

        
        for (int row =0; row <10; row++) { // Loops through each cell in the grid and builds buttons
            for (int col = 0; col <10; col++) {
                JButton cell = new JButton();
                cell.setPreferredSize(new Dimension(40,40)); // Size of each button
                cell.setActionCommand(row + "," + col); // Used for identifying cells later

                // Checking if this spot is a ship or not:
                if (playerBoard[row][col] == 1) {
                    cell.setBackground(Color.GRAY); // Shows the ship as a grey 
                } else {
                    cell.setBackground(Color.CYAN); // Ocean colour
                }

                // Adding two listeners, 1 for firing shots, 1 for placing ships:
                buttons[row][col] = cell;
                gridPanel.add(cell);
                
                // Adding listener used for dropping a ship from sidebar to grid:
                cell.addActionListener(getGridActionListener(row, col, cell));
            }
        }

        // Adding the grid to the center of the window:
        add(gridPanel,BorderLayout.CENTER);

        // Creating and adding the ship side panel on the left side
        JPanel shipPlacementPanel = createShipPlacementPanel();
        add(shipPlacementPanel, BorderLayout.WEST); // Adds it to the left side of the grid
        
        // Adding messages at the bottom of the grid:
        messageLabel = new JLabel("Place your ships!", SwingConstants.CENTER);
        messageLabel.setFont(new Font("Comic Sans MS", Font.PLAIN, 14)); // For the font
        messageLabel.setBorder(BorderFactory.createEmptyBorder(10,0,10,0));
        add(messageLabel, BorderLayout.SOUTH);

        setVisible(true); // Shows the window
        ToolTipManager.sharedInstance().setInitialDelay(1000); // makes Tooltip appear quikcly

    }
    
    /**
     * Method that handles the grid cell and clicking logic while dragging
     * Returns an ActionListener that tries to place the ship is dragged
     */
    private ActionListener getGridActionListener(int row, int col, JButton cell) {
        return new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (draggingShip && shipIsDragging > 0) {
                    messageLabel.setText("Placing ship size of " + shipIsDragging + " at " + row + ", " + col);

                    // Check if ship fits horizontally
                    if (col + shipIsDragging <= gridCols) {
                        boolean canPlace = true;
                        for (int i = 0; i < shipIsDragging; i++) {
                            if (playerBoard[row][col + i] == 1) {
                                canPlace = false;
                                break;
                            }
                        }
                        
                        // Places ship if space is free:
                        if (canPlace) {
                            for (int i = 0; i < shipIsDragging; i++) {
                                playerBoard[row][col + i] = 1;
                                buttons[row][col + i].setBackground(Color.GRAY);
                                buttons[row][col + i].setEnabled(false);
                                messageLabel.setText("Ship placed!");
                            }
                            
                            // After placing the ship:
                            draggingShip = false; // Resets the dragging
                            shipIsDragging = 0;
                            
                            // Removing the placed ship from the side panel:
                            for (Component comp: shipPanel.getComponents()) { // Loops through every part inside the ship panel
                                if (comp instanceof JPanel && "active".equals(comp.getName())) { // Checking if this part is a panel and it's one we marked as being on the grid
                                    shipPanel.remove(comp); // Removes ship panel from the sidebar
                                    shipPanel.revalidate(); // Refreashes layout so that the gap disappears
                                    shipPanel.repaint(); // Redraws the panel to show the update
                                    break; // Breaks out of loop
                                    
                                }
                            }
                        } else { // If ship is not free
                            messageLabel.setText("Can't place ship here – space occupied.");
                        }
                    } else { // If the ship doesn't fit in the grid
                        messageLabel.setText("Ship doesn't fit in this row.");
                    }
                }
            }
        };
    }

    /**
     * Method to create a side panel where the ships will appear before being placed on the main grid
     * Also creates ships that get dragged and dropped into the grid
     * Returns JPanel containin all the ships as grey boxes
     */
    private JPanel createShipPlacementPanel() {
        shipPanel = new JPanel();
        shipPanel.setPreferredSize(new Dimension(250, getHeight())); // Makes the panel wider
        shipPanel.setLayout(new BoxLayout(shipPanel, BoxLayout.Y_AXIS));
        shipPanel.setBorder(BorderFactory.createTitledBorder("Your Ships"));
        shipPanel.setBackground(new Color(220,220,220)); // Makes the background of the panel light grey

        // Createing ships of different lengths:
        int[] shipSizes = {5,4,3,3,2};

        for (int size : shipSizes) {
            JPanel ship = new JPanel();
            ship.setLayout(new GridLayout(1, size));
            ship.setMaximumSize(new Dimension(200, 40));
            ship.setAlignmentX(Component.CENTER_ALIGNMENT);

            for (int placement = 0; placement < size; placement++) {
                JLabel cell = new JLabel();
                cell.setOpaque(true);
                cell.setBackground(Color.DARK_GRAY);
                cell.setBorder(BorderFactory.createLineBorder(Color.BLACK));
                ship.add(cell);
            }
            // Adding a click listener to select the ships:
            ship.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            ship.setToolTipText("Click to select ship of size "+ size);

            // Adding dragging behavior for ship:
            ship.addMouseListener(creatShipDragListener(size, ship, shipPanel));

            shipPanel.add(Box.createRigidArea(new Dimension(0,10))); // Adds spacing between each ship
            shipPanel.add(ship);
        }

        return shipPanel;
    }

    /**
     * Method that creates a mouselistener for selecting a ship to drag
     * Returns a mouselistener object
     */
    private MouseListener creatShipDragListener(int shipSize, JPanel ship, JPanel shipPanel) {
        return new MouseListener() {
            @Override
            public void mousePressed(MouseEvent e) {
                draggingShip = true;
                shipIsDragging = shipSize;
                
                // Remembering the panel we are dragging to remove later:
                ship.setName("active"); // Marks the ship being placed with this tag
                
                // Highlighting the ship
                ship.setBorder(BorderFactory.createLineBorder(Color.BLUE,3)); // Sets a blue outline around selected ship
                
                // Unhighlighting previously selected ship (if any):
                if (selectedShip !=null && selectedShip !=ship) {
                    selectedShip.setBorder(null);
                }
                
                // Showing message:
                messageLabel.setText("Selected ship of size "+ shipSize);
            }

            @Override public void mouseClicked(MouseEvent e) {}

            @Override public void mouseReleased(MouseEvent e) {}

            @Override public void mouseEntered(MouseEvent e) {}

            @Override public void mouseExited(MouseEvent e) {}
        };
    }
}
